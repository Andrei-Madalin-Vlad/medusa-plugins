{"/Authentication":{"title":"Authentication plugin","data":{"":"","getting-started#Getting started":"npm install medusa-plugin-auth\n\n\n\nyarn add medusa-plugin-auth","what-is-included#What is included":"This plugin provides you with the following authentication providers\nGoogle\nFacebook\nLinkedin\nAuth0\nFirebase","contribute#Contribute":"This plugin provides you with a set of external authentication providers. The purpose is to allow you to provide\nother authentication systems than just the native email/password.If you feel that you would like, a specific provider to be added, report a bug or just contributeThen you can either:\ncreate an issue\nopen a PR"}},"/Authentication/facebook":{"title":"Facebook","data":{"":"","configuration#Configuration":"In order to be able to use the facebook authentication provider, you have to add the configuration to your\nnewly added plugins. To do so here are the steps\nConfigure your facebook developer console\n\nGo to your medusa-config.js\n\nCheck that the variables are set with the appropriate values\nconst BACKEND_URL = process.env.BACKEND_URL || \"localhost:9000\"\nconst ADMIN_URL = process.env.ADMIN_URL || \"localhost:7000\"\nconst STORE_URL = process.env.STORE_URL || \"localhost:8000\"\n\nconst FacebookClientId = process.env.FACEBOOK_CLIENT_ID || \"\"\nconst FacebookClientSecret = process.env.FACEBOOK_CLIENT_SECRET || \"\"\nThen in your plugins collections, if you did not already inserted the plugin, add the following otherwise, you can\njust add the facebook options to your auth plugin options\n{\nresolve: \"medusa-plugin-auth\",\noptions: {\nfacebook: {\nclientID: FacebookClientId,\nclientSecret: FacebookClientSecret,\n\nadmin: {\ncallbackUrl:`${BACKEND_URL}/admin/auth/facebook/cb`,\nfailureRedirect: `${ADMIN_URL}/login`,\nsuccessRedirect: `${ADMIN_URLL}/`,\n// authPath: '/admin/auth/facebook',\n// authCallbackPath: '/admin/auth/facebook/cb',\n// expiresIn: 24 * 60 * 60 * 1000,\n// verifyCallback: (container, req, accessToken, refreshToken, profile) => {\n//    // implement your custom verify callback here if you need it\n// }\n},\n\nstore: {\ncallbackUrl:`${process.env.BACKEND_URL}/store/auth/facebook/cb`,\nfailureRedirect: `${STORE_URL}/login`,\nsuccessRedirect: `${STORE_URL}/`,\n// authPath: '/store/auth/facebook',\n// authCallbackPath: '/store/auth/facebook/cb',\n// expiresIn: 24 * 60 * 60 * 1000,\n// verifyCallback: (container, req, accessToken, refreshToken, profile) => {\n//    // implement your custom verify callback here if you need it\n// }\n}\n}\n}\n}\nThe options that are commented are optional and the value that you see are the default values\n\nUpdate your client to add the authentication action\n<a href=\"${medusa_url}/${facebook_authPath}\" type=\"button\" class=\"text-white bg-[#3b5998] hover:bg-[#3b5998]/90 focus:ring-4 focus:outline-none focus:ring-[#3b5998]/50 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-[#3b5998]/55 mr-2 mb-2\">\n<svg class=\"mr-2 -ml-1 w-4 h-4\" aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fab\" data-icon=\"facebook-f\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\"><path fill=\"currentColor\" d=\"M279.1 288l14.22-92.66h-88.91v-60.13c0-25.35 12.42-50.06 52.24-50.06h40.42V6.26S260.4 0 225.4 0c-73.22 0-121.1 44.38-121.1 124.7v70.62H22.89V288h81.39v224h100.2V288z\"></path></svg>\nSign in with Facebook\n</a>\n\nmedusa_url correspond to your backend server url (e.g http://localhost:9000)\nauthPath correspond to authPath configuration in your plugin (e.g admin/auth/facebook)","default-behaviour#Default behaviour":"The default verifyCallback flow looks as follow,\nfor the admin\nif the user trying to authenticate exists\nthen we are looking in the metadata to find if any other external authentication methods have been used.\nIf none are found, then the user gets authenticated and can proceed and the metadata gets updated.\nIn the case another external authentication method have been used in the past, then an unauthorized\nwill be returned. If you want to allow a user to use multiple external authentication methods, you can\nupdate his metadata\n\n\nif the user trying to authenticate does not exist, an unauthorized error will be returned\n\n\nfor the store\nif the customer trying to authenticate exists\nthen we are looking in the metadata to find if any other external authentication methods have been used.\nIf none are found, then the customer gets authenticated and can proceed and the metadata gets updated.\nIn the case another external authentication method have been used in the past, then an unauthorized\nwill be returned. If you want to allow a customer to use multiple external authentication methods, you can\nupdate his metadata\n\n\nif the customer trying to authenticate does not exist, a new customer will be created and the authentication\nflow follow the previous point"}},"/Authentication/google":{"title":"Google","data":{"":"","configuration#Configuration":"In order to be able to use the google authentication provider, you have to add the configuration to your\nnewly added plugins. To do so here are the steps\nConfigure your google developer console\n\nGo to your medusa-config.js\n\nCheck that the variables are set with the appropriate values\nconst BACKEND_URL = process.env.BACKEND_URL || \"localhost:9000\"\nconst ADMIN_URL = process.env.ADMIN_URL || \"localhost:7000\"\nconst STORE_URL = process.env.STORE_URL || \"localhost:8000\"\n\nconst GoogleClientId = process.env.GOOGLE_CLIENT_ID || \"\"\nconst GoogleClientSecret = process.env.GOOGLE_CLIENT_SECRET || \"\"\nThen in your plugins collections, if you did not already inserted the plugin, add the following otherwise, you can\njust add the google options to your auth plugin options\n{\nresolve: \"medusa-plugin-auth\",\noptions: {\ngoogle: {\nclientID: GoogleClientId,\nclientSecret: GoogleClientSecret,\n\nadmin: {\ncallbackUrl:`${BACKEND_URL}/admin/auth/google/cb`,\nfailureRedirect: `${ADMIN_URL}/login`,\nsuccessRedirect: `${ADMIN_URLL}/`,\n// authPath: '/admin/auth/google',\n// authCallbackPath: '/admin/auth/google/cb',\n// expiresIn: 24 * 60 * 60 * 1000,\n// verifyCallback: (container, req, accessToken, refreshToken, profile) => {\n//    // implement your custom verify callback here if you need it\n// }\n},\n\nstore: {\ncallbackUrl:`${process.env.BACKEND_URL}/store/auth/google/cb`,\nfailureRedirect: `${STORE_URL}/login`,\nsuccessRedirect: `${STORE_URL}/`,\n// authPath: '/store/auth/google',\n// authCallbackPath: '/store/auth/google/cb',\n// expiresIn: 24 * 60 * 60 * 1000,\n// verifyCallback: (container, req, accessToken, refreshToken, profile) => {\n//    // implement your custom verify callback here if you need it\n// }\n}\n}\n}\n}\nThe options that are commented are optional and the value that you see are the default values\n\nUpdate your client to add the authentication action\n<a type=\"button\" href=${medusa_url}/${authPath} className=\"text-white bg-[#4285F4] hover:bg-[#4285F4]/90 focus:ring-4 focus:outline-none focus:ring-[#4285F4]/50 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-[#4285F4]/55 mr-2 mb-2\">\n<svg className=\"mr-2 -ml-1 w-4 h-4\" aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fab\" data-icon=\"google\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 488 512\"><path fill=\"currentColor\" d=\"M488 261.8C488 403.3 391.1 504 248 504 110.8 504 0 393.2 0 256S110.8 8 248 8c66.8 0 123 24.5 166.3 64.9l-67.5 64.9C258.5 52.6 94.3 116.6 94.3 256c0 86.5 69.1 156.6 153.7 156.6 98.2 0 135-70.4 140.8-106.9H248v-85.3h236.1c2.3 12.7 3.9 24.9 3.9 41.4z\"></path></svg>\nSign in with Google\n</a>\n\nmedusa_url correspond to your backend server url (e.g http://localhost:9000)\nauthPath correspond to authPath configuration in your plugin (e.g admin/auth/google)","default-behaviour#Default behaviour":"The default verifyCallback flow looks as follow,\nfor the admin\nif the user trying to authenticate exists\nthen we are looking in the metadata to find if any other external authentication methods have been used.\nIf none are found, then the user gets authenticated and can proceed and the metadata gets updated.\nIn the case another external authentication method have been used in the past, then an unauthorized\nwill be returned. If you want to allow a user to use multiple external authentication methods, you can\nupdate his metadata\n\n\nif the user trying to authenticate does not exist, an unauthorized error will be returned\n\n\nfor the store\nif the customer trying to authenticate exists\nthen we are looking in the metadata to find if any other external authentication methods have been used.\nIf none are found, then the customer gets authenticated and can proceed and the metadata gets updated.\nIn the case another external authentication method have been used in the past, then an unauthorized\nwill be returned. If you want to allow a customer to use multiple external authentication methods, you can\nupdate his metadata\n\n\nif the customer trying to authenticate does not exist, a new customer will be created and the authentication\nflow follow the previous point"}},"/":{"title":"Index","data":{"":"This repository aims to centralise the current and future plugins I am working on. That way, it seems easier for you\nto find them and contribute if you want.\nAll the plugins are under the MIT licence and are completely free. Please, do not hesitate to star the repository\nin order to support the work. You can also sponsorhere is the list of the plugins you can find in this documentation:\nmedusa-plugin-auth"}}}